================================================================================
INSTRUCCIONES PARA IMPLEMENTAR SERVICIO DE CONTACTO - BACKEND JAVASCRIPT
================================================================================

üìß SERVICIO: Env√≠o de Mensajes de Contacto
üåê ENDPOINT: POST /api/contact/send-message
üìÖ FECHA: [Fecha actual]
üë§ DESARROLLADOR: [Tu nombre]
üîß TECNOLOG√çA: Node.js + Express + [Base de datos]

================================================================================
1. DEPENDENCIAS NECESARIAS
================================================================================

npm install express validator nodemailer rate-limiter-flexible
npm install --save-dev jest supertest

// O si usas yarn:
yarn add express validator nodemailer rate-limiter-flexible
yarn add --dev jest supertest

================================================================================
2. ESTRUCTURA DE DATOS DEL FORMULARIO
================================================================================

El formulario de contacto env√≠a los siguientes datos:

{
  "name": "string",           // Nombre completo del usuario (requerido)
  "email": "string",          // Email del usuario (requerido, formato v√°lido)
  "phone": "string",          // Tel√©fono (opcional)
  "subject": "string",        // Asunto del mensaje (requerido)
  "message": "string"         // Mensaje del usuario (requerido)
}

TIPOS DE ASUNTO:
- "consulta"     ‚Üí Consulta General
- "cita"         ‚Üí Agendar Cita
- "emergencia"   ‚Üí Emergencia Dental
- "presupuesto"  ‚Üí Solicitar Presupuesto
- "otro"         ‚Üí Otro

================================================================================
3. VALIDACIONES CON EXPRESS-VALIDATOR
================================================================================

// middleware/contactValidation.js
const { body, validationResult } = require('express-validator');

const contactValidation = [
  body('name')
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage('El nombre debe tener entre 2 y 100 caracteres')
    .matches(/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/)
    .withMessage('El nombre solo puede contener letras y espacios'),
    
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('El email no tiene un formato v√°lido')
    .isLength({ max: 255 })
    .withMessage('El email es demasiado largo'),
    
  body('phone')
    .optional()
    .isLength({ max: 20 })
    .withMessage('El tel√©fono es demasiado largo')
    .matches(/^[\+]?[0-9\s\-\(\)]+$/)
    .withMessage('El tel√©fono no tiene un formato v√°lido'),
    
  body('subject')
    .isIn(['consulta', 'cita', 'emergencia', 'presupuesto', 'otro'])
    .withMessage('El asunto seleccionado no es v√°lido')
    .isLength({ max: 50 })
    .withMessage('El asunto es demasiado largo'),
    
  body('message')
    .trim()
    .isLength({ min: 10, max: 1000 })
    .withMessage('El mensaje debe tener entre 10 y 1000 caracteres')
    .escape()
    .withMessage('El mensaje contiene caracteres no permitidos')
];

const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      message: 'Datos inv√°lidos',
      errors: errors.array().reduce((acc, error) => {
        acc[error.path] = [error.msg];
        return acc;
      }, {})
    });
  }
  next();
};

module.exports = { contactValidation, handleValidationErrors };

================================================================================
4. MODELO DE BASE DE DATOS (EJEMPLO CON SEQUELIZE)
================================================================================

// models/ContactMessage.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const ContactMessage = sequelize.define('ContactMessage', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true
  },
  name: {
    type: DataTypes.STRING(100),
    allowNull: false
  },
  email: {
    type: DataTypes.STRING(255),
    allowNull: false
  },
  phone: {
    type: DataTypes.STRING(20),
    allowNull: true
  },
  subject: {
    type: DataTypes.STRING(50),
    allowNull: false
  },
  message: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'read', 'replied', 'archived'),
    defaultValue: 'pending'
  },
  ipAddress: {
    type: DataTypes.STRING,
    allowNull: true
  },
  userAgent: {
    type: DataTypes.TEXT,
    allowNull: true
  }
}, {
  timestamps: true,
  tableName: 'contact_messages'
});

module.exports = ContactMessage;

================================================================================
5. CONFIGURACI√ìN DE EMAIL CON NODEMAILER
================================================================================

// config/email.js
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransporter({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: process.env.SMTP_PORT === '465', // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
});

const sendConfirmationEmail = async (userEmail, userName) => {
  const mailOptions = {
    from: process.env.SMTP_USER,
    to: userEmail,
    subject: 'Gracias por contactarnos - Cl√≠nica Dental',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">¬°Gracias por contactarnos!</h2>
        <p>Hola ${userName},</p>
        <p>Hemos recibido tu mensaje y nos pondremos en contacto contigo pronto.</p>
        <p>Mientras tanto, puedes visitar nuestra p√°gina web para m√°s informaci√≥n.</p>
        <br>
        <p>Saludos,<br>Equipo de Cl√≠nica Dental</p>
      </div>
    `
  };
  
  return transporter.sendMail(mailOptions);
};

const sendNotificationEmail = async (contactMessage) => {
  const mailOptions = {
    from: process.env.SMTP_USER,
    to: process.env.ADMIN_EMAIL,
    subject: `Nuevo mensaje de contacto - ${contactMessage.subject}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #dc2626;">Nuevo mensaje de contacto</h2>
        <p><strong>De:</strong> ${contactMessage.name}</p>
        <p><strong>Email:</strong> ${contactMessage.email}</p>
        <p><strong>Tel√©fono:</strong> ${contactMessage.phone || 'No proporcionado'}</p>
        <p><strong>Asunto:</strong> ${contactMessage.subject}</p>
        <p><strong>Mensaje:</strong></p>
        <p style="background: #f3f4f6; padding: 15px; border-radius: 5px;">
          ${contactMessage.message}
        </p>
        <p><strong>Fecha:</strong> ${contactMessage.createdAt}</p>
      </div>
    `
  };
  
  return transporter.sendMail(mailOptions);
};

module.exports = { sendConfirmationEmail, sendNotificationEmail };

================================================================================
6. RATE LIMITING CON RATE-LIMITER-FLEXIBLE
================================================================================

// middleware/rateLimiter.js
const { RateLimiterMemory } = require('rate-limiter-flexible');

const rateLimiter = new RateLimiterMemory({
  keyGenerator: (req) => req.ip,
  points: 3, // 3 mensajes
  duration: 3600, // por hora
});

const contactRateLimiter = async (req, res, next) => {
  try {
    await rateLimiter.consume(req.ip);
    next();
  } catch (rejRes) {
    return res.status(429).json({
      success: false,
      message: 'Demasiados mensajes. Int√©ntalo m√°s tarde.'
    });
  }
};

module.exports = contactRateLimiter;

================================================================================
7. CONTROLLER COMPLETO
================================================================================

// controllers/contactController.js
const ContactMessage = require('../models/ContactMessage');
const { sendConfirmationEmail, sendNotificationEmail } = require('../config/email');

const sendContactMessage = async (req, res) => {
  try {
    const { name, email, phone, subject, message } = req.body;
    
    // Crear el mensaje en la base de datos
    const contactMessage = await ContactMessage.create({
      name,
      email,
      phone,
      subject,
      message,
      ipAddress: req.ip,
      userAgent: req.headers['user-agent']
    });
    
    // Enviar emails (as√≠ncrono para no bloquear la respuesta)
    Promise.all([
      sendConfirmationEmail(email, name),
      sendNotificationEmail(contactMessage)
    ]).catch(error => {
      console.error('Error enviando emails:', error);
      // No fallar la respuesta si los emails fallan
    });
    
    // Respuesta exitosa
    res.status(200).json({
      success: true,
      message: 'Mensaje enviado correctamente. Te contactaremos pronto.',
      data: {
        id: contactMessage.id,
        timestamp: contactMessage.createdAt,
        status: contactMessage.status
      }
    });
    
  } catch (error) {
    console.error('Error en contacto:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor. Int√©ntalo de nuevo m√°s tarde.'
    });
  }
};

module.exports = { sendContactMessage };

================================================================================
8. RUTAS
================================================================================

// routes/contactRoutes.js
const express = require('express');
const router = express.Router();
const { sendContactMessage } = require('../controllers/contactController');
const { contactValidation, handleValidationErrors } = require('../middleware/contactValidation');
const contactRateLimiter = require('../middleware/rateLimiter');

router.post('/send-message', 
  contactRateLimiter,
  contactValidation,
  handleValidationErrors,
  sendContactMessage
);

module.exports = router;

================================================================================
9. CONFIGURACI√ìN EN APP PRINCIPAL
================================================================================

// app.js o server.js
const express = require('express');
const cors = require('cors');
const contactRoutes = require('./routes/contactRoutes');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Rutas
app.use('/api/contact', contactRoutes);

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    message: 'Error interno del servidor'
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en puerto ${PORT}`);
});

================================================================================
10. VARIABLES DE ENTORNO (.env)
================================================================================

# Base de datos
DATABASE_URL=postgresql://user:pass@host:port/db
# o para MySQL: DATABASE_URL=mysql://user:pass@host:port/db

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=tu-email@gmail.com
SMTP_PASS=tu-contrase√±a-de-aplicaci√≥n
ADMIN_EMAIL=admin@clinica.com

# Rate limiting
RATE_LIMIT_MAX=3
RATE_LIMIT_WINDOW=3600

# Puerto del servidor
PORT=3000

================================================================================
11. TESTING CON JEST
================================================================================

// tests/contact.test.js
const request = require('supertest');
const app = require('../app');
const ContactMessage = require('../models/ContactMessage');

describe('POST /api/contact/send-message', () => {
  beforeEach(async () => {
    await ContactMessage.destroy({ where: {} });
  });

  test('env√≠a mensaje exitosamente', async () => {
    const response = await request(app)
      .post('/api/contact/send-message')
      .send({
        name: 'Juan P√©rez',
        email: 'juan@test.com',
        phone: '+57 300 123-4567',
        subject: 'consulta',
        message: 'Hola, me gustar√≠a consultar sobre...'
      });

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
  });

  test('valida campos requeridos', async () => {
    const response = await request(app)
      .post('/api/contact/send-message')
      .send({
        name: '',
        email: 'invalid-email',
        subject: 'invalid-subject',
        message: 'corto'
      });

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
  });
});

================================================================================
12. SCRIPT DE MIGRACI√ìN (SI USAS SEQUELIZE)
================================================================================

// migrations/20240115-create-contact-messages.js
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('contact_messages', {
      id: {
        type: Sequelize.UUID,
        defaultValue: Sequelize.UUIDV4,
        primaryKey: true
      },
      name: {
        type: Sequelize.STRING(100),
        allowNull: false
      },
      email: {
        type: Sequelize.STRING(255),
        allowNull: false
      },
      phone: {
        type: Sequelize.STRING(20),
        allowNull: true
      },
      subject: {
        type: Sequelize.STRING(50),
        allowNull: false
      },
      message: {
        type: Sequelize.TEXT,
        allowNull: false
      },
      status: {
        type: Sequelize.ENUM('pending', 'read', 'replied', 'archived'),
        defaultValue: 'pending'
      },
      ipAddress: {
        type: Sequelize.STRING,
        allowNull: true
      },
      userAgent: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      createdAt: {
        type: Sequelize.DATE,
        allowNull: false
      },
      updatedAt: {
        type: Sequelize.DATE,
        allowNull: false
      }
    });

    // √çndices
    await queryInterface.addIndex('contact_messages', ['email']);
    await queryInterface.addIndex('contact_messages', ['status']);
    await queryInterface.addIndex('contact_messages', ['createdAt']);
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('contact_messages');
  }
};

================================================================================
13. PACKAGE.JSON SCRIPT
================================================================================

{
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "migrate": "sequelize db:migrate",
    "migrate:undo": "sequelize db:migrate:undo"
  }
}

================================================================================
14. DEPLOYMENT
================================================================================

1. Configurar variables de entorno en producci√≥n
2. Configurar base de datos
3. Ejecutar migraciones: `npm run migrate`
4. Instalar dependencias: `npm install --production`
5. Iniciar servidor: `npm start`

================================================================================
FIN DE INSTRUCCIONES PARA JAVASCRIPT
================================================================================

üìù NOTAS ESPEC√çFICAS PARA JAVASCRIPT:
- Usar async/await para operaciones as√≠ncronas
- Manejar errores con try/catch
- Validar con express-validator
- Usar nodemailer para emails
- Implementar rate limiting
- Testear con Jest y Supertest 