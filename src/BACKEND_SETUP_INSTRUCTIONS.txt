===============================================================================
                    CONFIGURACIÓN DEL BACKEND PARA FLUJO DE CITAS
===============================================================================

Este documento contiene las instrucciones para configurar el backend y que funcione
correctamente con el flujo de creación de citas como invitado del frontend.

===============================================================================
                                ENDPOINTS REQUERIDOS
===============================================================================

El frontend espera estos endpoints exactos:

| Método | Endpoint                                    | Descripción                    |
|--------|---------------------------------------------|--------------------------------|
| GET    | /api/especialidad                          | Obtener todas las especialidades |
| GET    | /api/service-type/especialidad/:id        | Obtener tipos de servicio por especialidad |
| GET    | /api/disponibilidad/especialidad/:id      | Obtener disponibilidades por especialidad |
| POST   | /api/guest-patient                         | Crear paciente invitado |
| POST   | /api/appointment/guest                     | Crear cita como invitado |

===============================================================================
                            CONFIGURACIÓN DEL SERVIDOR
===============================================================================

1. ESTRUCTURA DE RUTAS EN EL SERVIDOR PRINCIPAL
   (En tu archivo app.js o server.js)

```javascript
const express = require('express');
const app = express();

// Importar los routers
const especialidadRouter = require('./routes/especialidad');
const serviceTypeRouter = require('./routes/service-type');
const disponibilidadRouter = require('./routes/disponibilidad');
const guestPatientRouter = require('./routes/guest-patient');
const appointmentRouter = require('./routes/appointment');

// Registrar las rutas con el prefijo /api
app.use('/api/especialidad', especialidadRouter);
app.use('/api/service-type', serviceTypeRouter);
app.use('/api/disponibilidad', disponibilidadRouter);
app.use('/api/guest-patient', guestPatientRouter);
app.use('/api/appointment', appointmentRouter);
```

2. CONFIGURACIÓN CORS
   (Para permitir peticiones desde el frontend)

```javascript
const cors = require('cors');

app.use(cors({
  origin: 'http://localhost:5173', // URL de tu frontend
  credentials: true
}));
```

===============================================================================
                            FORMATO DE RESPUESTAS
===============================================================================

El frontend espera que TODAS las respuestas tengan este formato:

RESPUESTA EXITOSA:
```json
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Ortodoncia",
      "description": "Corrección de la posición de los dientes",
      "is_active": true
    }
  ]
}
```

RESPUESTA DE ERROR:
```json
{
  "success": false,
  "message": "Mensaje de error descriptivo"
}
```

===============================================================================
                            AUTENTICACIÓN
===============================================================================

IMPORTANTE: Los endpoints de citas como invitado deben ser PÚBLICOS
(no requieren autenticación):

- GET /api/especialidad
- GET /api/service-type/especialidad/:id  
- GET /api/disponibilidad/especialidad/:id
- POST /api/guest-patient
- POST /api/appointment/guest

Estos endpoints deben estar disponibles sin token de autenticación.

===============================================================================
                            VERIFICACIÓN
===============================================================================

Para verificar que las rutas estén funcionando correctamente:

1. Verificar que el servidor responde:
   ```bash
   curl http://localhost:3000/api/especialidad
   ```

2. Verificar que las rutas están registradas:
   ```bash
   curl http://localhost:3000/api
   ```

3. Probar endpoints específicos:
   ```bash
   # Probar especialidades
   curl http://localhost:3000/api/especialidad
   
   # Probar tipos de servicio
   curl http://localhost:3000/api/service-type/especialidad/1
   
   # Probar disponibilidades
   curl http://localhost:3000/api/disponibilidad/especialidad/1
   ```

===============================================================================
                            CHECKLIST DE CONFIGURACIÓN
===============================================================================

Para el desarrollador del backend, verificar:

□ Rutas registradas: Todas las rutas están registradas con /api
□ CORS configurado: Permite peticiones desde localhost:5173
□ Formato de respuesta: Todas las respuestas tienen success y data
□ Endpoints públicos: Los endpoints de citas como invitado no requieren autenticación
□ Validaciones: Los datos se validan correctamente
□ Manejo de errores: Errores se devuelven en formato JSON
□ Base de datos: Las tablas necesarias están creadas y con datos
□ Controladores: Los controladores están implementados correctamente

===============================================================================
                            ACTIVACIÓN EN FRONTEND
===============================================================================

Una vez que el backend esté configurado correctamente:

1. Cambiar en src/services/appointmentService.js:
   ```javascript
   const USE_MOCK_DATA = false; // Cambiar de true a false
   ```

2. Reiniciar el servidor de desarrollo del frontend:
   ```bash
   npm run dev
   ```

3. Probar el flujo completo en:
   http://localhost:5173/guest-appointment

===============================================================================
                            ESTRUCTURA DE DATOS ESPERADA
===============================================================================

ESPECIALIDADES:
```json
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Ortodoncia",
      "description": "Corrección de la posición de los dientes",
      "is_active": true
    }
  ]
}
```

TIPOS DE SERVICIO:
```json
{
  "success": true,
  "data": [
    {
      "id": 1,
      "name": "Consulta inicial",
      "description": "Primera consulta de evaluación",
      "duration": 30,
      "price": 50000,
      "especialidad_id": 1
    }
  ]
}
```

DISPONIBILIDADES:
```json
{
  "success": true,
  "data": [
    {
      "id": 1,
      "date": "2024-01-15",
      "start_time": "09:00:00",
      "end_time": "10:00:00",
      "dentist": {
        "id": 1,
        "name": "Dr. María González"
      },
      "especialidad": {
        "id": 1,
        "name": "Ortodoncia"
      }
    }
  ]
}
```

PACIENTE INVITADO (POST):
```json
{
  "name": "Juan Pérez",
  "email": "juan.perez@email.com",
  "phone": "3001234567",
  "id_number": "12345678"
}
```

CITA COMO INVITADO (POST):
```json
{
  "guest_patient_id": 1,
  "disponibilidad_id": 5,
  "service_type_id": 2,
  "notes": "Dolor en muela posterior derecha"
}
```

===============================================================================
                            SOLUCIÓN DE PROBLEMAS
===============================================================================

ERROR 404: Las rutas no están registradas
- Verificar que las rutas estén registradas en el servidor principal
- Verificar que el prefijo /api esté incluido

ERROR CORS: No se permiten peticiones desde el frontend
- Verificar configuración de CORS
- Asegurar que origin incluya http://localhost:5173

ERROR DE FORMATO: Las respuestas no tienen el formato esperado
- Verificar que todas las respuestas tengan success y data
- Verificar que los controladores devuelvan el formato correcto

ERROR DE AUTENTICACIÓN: Endpoints requieren token
- Verificar que los endpoints de citas como invitado sean públicos
- Remover middleware de autenticación de estas rutas

===============================================================================
                            CONTACTO Y SOPORTE
===============================================================================

Si tienes problemas con la configuración:

1. Verificar que el servidor esté corriendo en puerto 3000
2. Verificar que las rutas estén registradas correctamente
3. Verificar que CORS esté configurado
4. Verificar que los controladores estén implementados
5. Verificar que la base de datos tenga datos de prueba

Fecha de creación: 2024
Versión: 1.0
=============================================================================== 